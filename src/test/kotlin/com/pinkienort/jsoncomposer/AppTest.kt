/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.pinkienort.jsoncomposer

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFails

class AppTest {
    @Test
    fun `一番シンプルなやつ`() {
        val json = Json {
            Item { "hoge" to "fuga" }
        }
        val exp = """
            { "hoge" : "fuga" }
        """.trimIndent()
        assertEquals(exp, json.build())
    }

    @Test
    fun `1段階ネスト`() {
        val json = Json {
            Item {
                "nest" to Json {
                    Item { "body" to "data" }
                }
            }
        }
        val exp = """
            { "nest" : { "body" : "data" } }
        """.trimIndent()
        assertEquals(exp, json.build())
    }

    @Test
    fun `深いネスト(3段階)`() {
        val json = Json {
            Item {
                "n1" to Json {
                    Item {
                        "n2" to Json {
                            Item { "n3" to "last child" }
                        }
                    }
                }
            }
        }
        val exp = """
            { "n1" : { "n2" : { "n3" : "last child" } } }
        """.trimIndent()
        assertEquals(exp, json.build())
    }

    @Test
    fun `Item関数のネストできたら嬉しい`() {
        val json = Json {
            Item { "n1" to Item { "n2" to "data" } }
        }
        val exp = """
            { "n1" : { "n2" : "data" } }
        """.trimIndent()
        assertFails {
            // TODO: Itemのネストで書けるように
            assertEquals(exp, json.build())
        }
    }

    @Test
    fun `配列型`() {
        val json = Json {
            Item {
                "array" to Array {
                    Item { "str" }
                    Item { 1 }
                    Item { 0.5f }
                    Item { true }
                }
            }
        }
        val exp = """
            { "array" : [ "str", 1, 0.5, true ] }
        """.trimIndent()
        assertEquals(exp, json.build())
    }

    @Test
    fun `オブジェクト → 配列 → オブジェクトのネスト`() {
        val json = Json {
            Item {
                "arr" to Array {
                    // TODO: ネスト減らしてかけたら最高
                    Item {
                        Json {
                            Item { "obj" to "ele" }
                        }
                    }
                }
            }
        }
        val exp = """
            { "arr" : [ { "obj" : "ele" } ] }
        """.trimIndent()
        assertEquals(exp, json.build())
    }
}
